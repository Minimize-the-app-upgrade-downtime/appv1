{"ast":null,"code":"import { Breakpoints } from '@angular/cdk/layout';\nimport { map, shareReplay } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/cdk/layout\";\nexport class NavbarComponent {\n  constructor(breakpointObserver) {\n    this.breakpointObserver = breakpointObserver;\n    this.isHandset$ = this.breakpointObserver.observe(Breakpoints.Handset).pipe(map(result => result.matches), shareReplay());\n  }\n\n}\n\nNavbarComponent.ɵfac = function NavbarComponent_Factory(t) {\n  return new (t || NavbarComponent)(i0.ɵɵdirectiveInject(i1.BreakpointObserver));\n};\n\nNavbarComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: NavbarComponent,\n  selectors: [[\"app-navbar\"]],\n  decls: 18,\n  vars: 9,\n  consts: [[1, \"sidenav-container\"], [\"fixedInViewport\", \"\", 1, \"sidenav\", 3, \"mode\", \"opened\"], [\"drawer\", \"\"], [\"mat-list-item\", \"\", \"routerLink\", \"/add-office\", \"routerLinkActive\", \"active\"], [\"mat-list-item\", \"\", \"href\", \"/view-office\"], [\"mat-list-item\", \"\", \"href\", \"/add-employee\"], [\"mat-list-item\", \"\", \"href\", \"/view-employee\"]],\n  template: function NavbarComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"mat-sidenav-container\", 0);\n      i0.ɵɵelementStart(1, \"mat-sidenav\", 1, 2);\n      i0.ɵɵpipe(3, \"async\");\n      i0.ɵɵpipe(4, \"async\");\n      i0.ɵɵpipe(5, \"async\");\n      i0.ɵɵelementStart(6, \"mat-toolbar\");\n      i0.ɵɵtext(7, \"Menu\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"mat-nav-list\");\n      i0.ɵɵelementStart(9, \"a\", 3);\n      i0.ɵɵtext(10, \"Add Office \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"a\", 4);\n      i0.ɵɵtext(12, \"View Office \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"a\", 5);\n      i0.ɵɵtext(14, \"Add Employee\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"a\", 6);\n      i0.ɵɵtext(16, \"View Employee \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(17, \"router-outlet\");\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"mode\", i0.ɵɵpipeBind1(4, 5, ctx.isHandset$) ? \"over\" : \"side\")(\"opened\", i0.ɵɵpipeBind1(5, 7, ctx.isHandset$) === false);\n      i0.ɵɵattribute(\"role\", i0.ɵɵpipeBind1(3, 3, ctx.isHandset$) ? \"dialog\" : \"navigation\");\n    }\n  },\n  styles: [\".sidenav-container[_ngcontent-%COMP%] {\\n  height: 100%;\\n}\\n\\n.sidenav[_ngcontent-%COMP%] {\\n  width: 200px;\\n}\\n\\n.sidenav[_ngcontent-%COMP%]   .mat-toolbar[_ngcontent-%COMP%] {\\n  background: inherit;\\n}\\n\\n.mat-toolbar.mat-primary[_ngcontent-%COMP%] {\\n  position: sticky;\\n  top: 0;\\n  z-index: 1;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5hdmJhci5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsWUFBWTtBQUNkOztBQUVBO0VBQ0UsWUFBWTtBQUNkOztBQUVBO0VBQ0UsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0UsZ0JBQWdCO0VBQ2hCLE1BQU07RUFDTixVQUFVO0FBQ1oiLCJmaWxlIjoibmF2YmFyLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuc2lkZW5hdi1jb250YWluZXIge1xuICBoZWlnaHQ6IDEwMCU7XG59XG5cbi5zaWRlbmF2IHtcbiAgd2lkdGg6IDIwMHB4O1xufVxuXG4uc2lkZW5hdiAubWF0LXRvb2xiYXIge1xuICBiYWNrZ3JvdW5kOiBpbmhlcml0O1xufVxuXG4ubWF0LXRvb2xiYXIubWF0LXByaW1hcnkge1xuICBwb3NpdGlvbjogc3RpY2t5O1xuICB0b3A6IDA7XG4gIHotaW5kZXg6IDE7XG59XG4iXX0= */\"]\n});","map":{"version":3,"sources":["/home/dilshan/Desktop/EPF_v1/Frontend/src/app/navbar/navbar.component.ts","/home/dilshan/Desktop/EPF_v1/Frontend/src/app/navbar/navbar.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component } from '@angular/core';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css']\n})\nexport class NavbarComponent {\n\n  isHandset$: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.Handset)\n    .pipe(\n      map(result => result.matches),\n      shareReplay()\n    );\n\n  constructor(private breakpointObserver: BreakpointObserver) {}\n\n}\n","<mat-sidenav-container class=\"sidenav-container\">\n  <mat-sidenav #drawer class=\"sidenav\" fixedInViewport\n      [attr.role]=\"(isHandset$ | async) ? 'dialog' : 'navigation'\"\n      [mode]=\"(isHandset$ | async) ? 'over' : 'side'\"\n      [opened]=\"(isHandset$ | async) === false\">\n    <mat-toolbar>Menu</mat-toolbar>\n    <mat-nav-list>\n      <a mat-list-item routerLink=\"/add-office\" routerLinkActive=\"active\">Add Office </a>\n      <a mat-list-item href=\"/view-office\">View Office </a>\n      <a mat-list-item href=\"/add-employee\">Add Employee</a>\n      <a mat-list-item href=\"/view-employee\">View Employee </a>\n    </mat-nav-list>\n  </mat-sidenav>\n  <router-outlet></router-outlet>\n</mat-sidenav-container>\n\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}